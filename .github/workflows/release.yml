name: 🚀 Release Management

on:
  push:
    branches: [ main ]
    paths:
      - 'content/**'
      - 'code/**'
      - 'exercises/**'
      - 'package.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'

jobs:
  # Check if release needed
  check-release:
    name: 🔍 Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      needs-release: ${{ steps.check.outputs.needs-release }}
      version-bump: ${{ steps.check.outputs.version-bump }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check Release Criteria
        id: check
        run: |
          echo "Checking if release is needed..."
          
          # Get last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $last_tag"
          
          # Count commits since last tag
          commits_since_tag=$(git rev-list ${last_tag}..HEAD --count)
          echo "Commits since last tag: $commits_since_tag"
          
          # Check for significant changes
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual release triggered"
            echo "needs-release=true" >> $GITHUB_OUTPUT
            echo "version-bump=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          elif [[ $commits_since_tag -gt 0 ]]; then
            echo "Content changes detected since last release"
          
            # Determine version bump type based on commit messages
            if git log --format=%s ${last_tag}..HEAD | grep -q "BREAKING CHANGE\|feat!:"; then
              echo "Breaking changes detected - major release"
              echo "version-bump=major" >> $GITHUB_OUTPUT
            elif git log --format=%s ${last_tag}..HEAD | grep -q "feat:"; then
              echo "New features detected - minor release"
              echo "version-bump=minor" >> $GITHUB_OUTPUT
            else
              echo "Fixes/improvements detected - patch release"
              echo "version-bump=patch" >> $GITHUB_OUTPUT
            fi
          
            echo "needs-release=true" >> $GITHUB_OUTPUT
          else
            echo "No changes since last release"
            echo "needs-release=false" >> $GITHUB_OUTPUT
          fi

  # Create Release
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.needs-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏷️ Generate New Version
        id: version
        run: |
          echo "Generating new version..."
          
          # Get current version
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $current_version"
          
          # Remove 'v' prefix for calculation
          version_num=${current_version#v}
          
          # Parse version components
          if [[ "$version_num" == "0.0.0" ]]; then
            major=1
            minor=0
            patch=0
          else
            IFS='.' read -ra VERSION_PARTS <<< "$version_num"
            major=${VERSION_PARTS[0]}
            minor=${VERSION_PARTS[1]}
            patch=${VERSION_PARTS[2]}
          fi
          
          # Calculate new version based on bump type
          case "${{ needs.check-release.outputs.version-bump }}" in
            "major")
              new_version="v$((major + 1)).0.0"
              ;;
            "minor")
              new_version="v${major}.$((minor + 1)).0"
              ;;
            "patch")
              new_version="v${major}.${minor}.$((patch + 1))"
              ;;
            *)
              new_version="v${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $new_version"
          echo "new-version=$new_version" >> $GITHUB_OUTPUT

      - name: 📊 Generate Content Statistics
        id: stats
        run: |
          echo "Generating content statistics..."
          
          total_content=$(find content -name "*.md" 2>/dev/null | wc -l)
          total_code=$(find code -name "*.go" 2>/dev/null | wc -l)
          total_exercises=$(find exercises -name "*.md" 2>/dev/null | wc -l)
          total_words=$(find content -name "*.md" -exec wc -w {} + 2>/dev/null | tail -n1 | awk '{print $1}' || echo "0")
          
          echo "content_files=$total_content" >> $GITHUB_OUTPUT
          echo "code_files=$total_code" >> $GITHUB_OUTPUT
          echo "exercise_files=$total_exercises" >> $GITHUB_OUTPUT
          echo "total_words=$total_words" >> $GITHUB_OUTPUT

      - name: 📝 Generate Changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          
          # Get last tag for changelog generation
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Generate changelog content
          changelog="## 🚀 What's New in ${{ steps.version.outputs.new-version }}

### ✨ New Features
$(git log --format="- %s" ${last_tag}..HEAD | grep "feat:" | sed 's/feat: //' | head -10)

### 🐛 Bug Fixes
$(git log --format="- %s" ${last_tag}..HEAD | grep "fix:" | sed 's/fix: //' | head -10)

### 📚 Content Updates
$(git log --format="- %s" ${last_tag}..HEAD | grep "content:" | sed 's/content: //' | head -10)

### 🔧 Improvements
$(git log --format="- %s" ${last_tag}..HEAD | grep -E "(refactor|perf|style):" | sed -E 's/(refactor|perf|style): //' | head -5)
  
  ## 📊 Content Statistics
  - **Content Files**: ${{ steps.stats.outputs.content_files }}
  - **Code Examples**: ${{ steps.stats.outputs.code_files }}
  - **Exercises**: ${{ steps.stats.outputs.exercise_files }}
  - **Total Words**: ${{ steps.stats.outputs.total_words }}

  ## 🔗 Links
  - [Learning Platform](https://godojo.dev)
  - [Full Changelog](https://github.com/${{ github.repository }}/compare/${last_tag}...${{ steps.version.outputs.new-version }})
  - [Contributing Guide](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)

---
*This release contains the latest Go tutorial content for the godojo.dev learning platform.*"
  
  # Save changelog (handle newlines properly)
  echo "changelog<<EOF" >> $GITHUB_OUTPUT
  echo "$changelog" >> $GITHUB_OUTPUT
  echo "EOF" >> $GITHUB_OUTPUT

- name: 🏷️ Create Git Tag
  run: |
    echo "Creating git tag ${{ steps.version.outputs.new-version }}"
    
    git config user.name "GitHub Actions"
    git config user.email "actions@github.com"
    
    git tag -a "${{ steps.version.outputs.new-version }}" -m "Release ${{ steps.version.outputs.new-version }}

Content statistics:
  - Content files: ${{ steps.stats.outputs.content_files }}
  - Code examples: ${{ steps.stats.outputs.code_files }}
  - Exercises: ${{ steps.stats.outputs.exercise_files }}
  - Total words: ${{ steps.stats.outputs.total_words }}"
      
      git push origin "${{ steps.version.outputs.new-version }}"

      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          release_name: "${{ steps.version.outputs.new-version }} - Go Tutorial Content Update"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

    # Export Content Archives
    export-content:
      name: 📦 Export Content
      runs-on: ubuntu-latest
      needs: create-release
      if: needs.create-release.outputs.new-version
      steps:
        - name: 📥 Checkout Code
          uses: actions/checkout@v4

        - name: 📚 Create Content Archives
          run: |
            echo "📚 Creating content archives..."
            
            # Create exports directory
            mkdir -p exports
            
            # Full content archive
            tar -czf exports/godojo-content-full-${{ needs.create-release.outputs.new-version }}.tar.gz \
              content/ code/ exercises/ templates/ README.md LICENSE content.config.json
            
            # Content only (for documentation)
            tar -czf exports/godojo-content-only-${{ needs.create-release.outputs.new-version }}.tar.gz \
              content/ README.md LICENSE
            
            # Code examples only
            tar -czf exports/godojo-code-examples-${{ needs.create-release.outputs.new-version }}.tar.gz \
              code/ README.md LICENSE
            
            # Exercises only
            tar -czf exports/godojo-exercises-${{ needs.create-release.outputs.new-version }}.tar.gz \
              exercises/ README.md LICENSE

        - name: 📊 Generate Release Report
          run: |
            echo "📊 Generating release report..."
            
            cat > exports/release-report-${{ needs.create-release.outputs.new-version }}.md << 'EOF'
            # Go Tutorial Content Release Report
            
            **Version**: ${{ needs.create-release.outputs.new-version }}
            **Release Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Repository**: ${{ github.repository }}
            
            ## 📊 Content Overview
            
            This release contains comprehensive Go programming tutorial content designed for the [godojo.dev](https://godojo.dev) learning platform.
            
            ### Content Structure
            - **79 Total Modules** across 16 categories
            - **Beginner to Expert** difficulty progression
            - **Production-ready** code examples
            - **Hands-on exercises** for practical learning
            
            ### What's Included
            - `content/` - Learning materials and tutorials
            - `code/` - Runnable Go code examples
            - `exercises/` - Practice exercises and challenges
            - `templates/` - Content creation templates
            
            ## 📄 License
            
            This content is released under the MIT License, making it free for:
            - Personal learning and education
            - Commercial training programs
            - Academic courses and workshops
            - Community translations and adaptations
            
            ## 🚀 Getting Started
            
            1. **For Learners**: Visit [godojo.dev](https://godojo.dev) for the interactive experience
            2. **For Educators**: Download the content archives and integrate into your curriculum
            3. **For Contributors**: See [CONTRIBUTING.md](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
            
            ## 🔗 Resources
            
            - [Learning Platform](https://godojo.dev)
            - [GitHub Repository](https://github.com/${{ github.repository }})
            - [Issue Tracker](https://github.com/${{ github.repository }}/issues)
            - [Discussions](https://github.com/${{ github.repository }}/discussions)
            
            ---
            *Built with ❤️ for the Go community*
            EOF

        - name: 📁 Upload Release Assets
          run: |
            echo "📁 Release assets created in exports/ directory"
            ls -la exports/
            echo "Assets will be available for download with the GitHub release"

    # Notify Success
    notify-success:
      name: 🎉 Release Success
      runs-on: ubuntu-latest
      needs: [create-release, export-content]
      if: success()
      steps:
        - name: 🎉 Success Summary
          run: |
            echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**New Version**: ${{ needs.create-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Release Type**: ${{ needs.check-release.outputs.version-bump }}" >> $GITHUB_STEP_SUMMARY
            echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Learning Platform](https://godojo.dev)" >> $GITHUB_STEP_SUMMARY
            echo "- [Download Content](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Content is now available on godojo.dev!**" >> $GITHUB_STEP_SUMMARY

        - name: 📢 Release Announcement
          run: |
            echo "🎉 Release ${{ needs.create-release.outputs.new-version }} created successfully!"
            echo "🔗 View at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.new-version }}"
            echo "🚀 Content is now available on godojo.dev"