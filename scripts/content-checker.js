#!/usr/bin/env node

import { readFile, readdir, stat } from 'node:fs/promises';
import { join, relative } from 'node:path';
import { existsSync } from 'node:fs';
import chalk from 'chalk';
import ora from 'ora';
import { marked } from 'marked';
import matter from 'gray-matter';

/**
 * Content Quality Checker
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
 */
class ContentChecker {
    constructor() {
        this.issues = [];
        this.warnings = [];
        this.stats = {
            totalFiles: 0,
            checkedFiles: 0,
            issues: 0,
            warnings: 0
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async run() {
        console.log(chalk.blue.bold('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n'));

        const spinner = ora('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ content
            if (!existsSync('content')) {
                spinner.fail('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è content –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã
            const files = await this.findMarkdownFiles('content');
            this.stats.totalFiles = files.length;

            spinner.text = `–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for (const file of files) {
                await this.checkFile(file);
                this.stats.checkedFiles++;
                spinner.text = `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${this.stats.checkedFiles}/${this.stats.totalFiles} —Ñ–∞–π–ª–æ–≤`;
            }

            spinner.succeed('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            process.exit(this.issues.length > 0 ? 1 : 0);

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            process.exit(1);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö markdown —Ñ–∞–π–ª–æ–≤
     */
    async findMarkdownFiles(dir) {
        const files = [];
        const entries = await readdir(dir, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = join(dir, entry.name);

            if (entry.isDirectory()) {
                const subFiles = await this.findMarkdownFiles(fullPath);
                files.push(...subFiles);
            } else if (entry.name.endsWith('.md')) {
                files.push(fullPath);
            }
        }

        return files;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async checkFile(filePath) {
        try {
            const content = await readFile(filePath, 'utf8');
            const { data: frontmatter, content: markdown } = matter(content);
            const relativePath = relative(process.cwd(), filePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ frontmatter
            this.checkFrontmatter(frontmatter, relativePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            this.checkContent(markdown, relativePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            this.checkStructure(markdown, relativePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
            this.checkCodeExamples(markdown, relativePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
            await this.checkLinks(markdown, relativePath);

        } catch (error) {
            this.addIssue(filePath, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ frontmatter
     */
    checkFrontmatter(frontmatter, filePath) {
        const requiredFields = ['title', 'description', 'authorId', 'category'];

        for (const field of requiredFields) {
            if (!frontmatter[field]) {
                this.addIssue(filePath, `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ frontmatter: ${field}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if (frontmatter.description && frontmatter.description.length < 50) {
            this.addWarning(filePath, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ estimatedMinutes
        if (frontmatter.estimatedMinutes && (frontmatter.estimatedMinutes < 5 || frontmatter.estimatedMinutes > 120)) {
            this.addWarning(filePath, '–ù–µ–æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ—Ç—Å—è 5-120 –º–∏–Ω—É—Ç)');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     */
    checkContent(markdown, filePath) {
        // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
        const words = markdown.split(/\s+/).filter(word => word.length > 0);
        if (words.length < 800) {
            this.addIssue(filePath, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${words.length} —Å–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 800)`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headings = markdown.match(/^#{1,6}\s+.+$/gm) || [];
        if (headings.length < 3) {
            this.addWarning(filePath, '–ú–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3)');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TODO
        if (markdown.includes('TODO')) {
            this.addWarning(filePath, '–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ TODO');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Lorem Ipsum
        if (/lorem\s+ipsum/i.test(markdown)) {
            this.addIssue(filePath, '–ù–∞–π–¥–µ–Ω placeholder —Ç–µ–∫—Å—Ç (Lorem Ipsum)');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    checkStructure(markdown, filePath) {
        const requiredSections = [
            '## üéØ –ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ',
            '## üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å',
            '## üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã',
            '## üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
        ];

        for (const section of requiredSections) {
            if (!markdown.includes(section)) {
                this.addWarning(filePath, `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª: ${section}`);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
     */
    checkCodeExamples(markdown, filePath) {
        const codeBlocks = markdown.match(/```go[\s\S]*?```/g) || [];

        if (codeBlocks.length < 3) {
            this.addIssue(filePath, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞: ${codeBlocks.length} (–º–∏–Ω–∏–º—É–º 3)`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞)
        codeBlocks.forEach((block, index) => {
            const code = block.replace(/```go\n?/, '').replace(/\n?```/, '');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ package declaration
            if (!code.includes('package ')) {
                this.addWarning(filePath, `–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç package declaration`);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            if (code.includes('err :=') && !code.includes('if err != nil')) {
                this.addWarning(filePath, `–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ ${index + 1} –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏`);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
     */
    async checkLinks(markdown, filePath) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        const internalLinks = markdown.match(/\[([^\]]+)\]\((?!http)([^)]+)\)/g) || [];

        for (const link of internalLinks) {
            const path = link.match(/\(([^)]+)\)/)[1];
            if (!path.startsWith('#') && !existsSync(join('content', path))) {
                this.addWarning(filePath, `–ë–∏—Ç–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞: ${path}`);
            }
        }

        // –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
        const externalLinks = markdown.match(/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g) || [];

        for (const link of externalLinks) {
            const url = link.match(/\((https?:\/\/[^)]+)\)/)[1];
            try {
                new URL(url); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
            } catch {
                this.addWarning(filePath, `–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: ${url}`);
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã
     */
    addIssue(file, message) {
        this.issues.push({ file, message });
        this.stats.issues++;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    addWarning(file, message) {
        this.warnings.push({ file, message });
        this.stats.warnings++;
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printResults() {
        console.log(chalk.blue('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n'));

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(chalk.gray('–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:'), this.stats.checkedFiles);
        console.log(chalk.red('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:'), this.stats.issues);
        console.log(chalk.yellow('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:'), this.stats.warnings);

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (this.issues.length > 0) {
            console.log(chalk.red.bold('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n'));
            this.issues.forEach(({ file, message }) => {
                console.log(chalk.red('  ‚Ä¢'), chalk.gray(file));
                console.log(chalk.red('    ‚Üí'), message);
            });
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (this.warnings.length > 0) {
            console.log(chalk.yellow.bold('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n'));
            this.warnings.forEach(({ file, message }) => {
                console.log(chalk.yellow('  ‚Ä¢'), chalk.gray(file));
                console.log(chalk.yellow('    ‚Üí'), message);
            });
        }

        // –ò—Ç–æ–≥
        if (this.issues.length === 0 && this.warnings.length === 0) {
            console.log(chalk.green.bold('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n'));
        } else if (this.issues.length === 0) {
            console.log(chalk.yellow.bold('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç.\n'));
        } else {
            console.log(chalk.red.bold('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.\n'));
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.issues.length > 0 || this.warnings.length > 0) {
            console.log(chalk.blue('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'));
            console.log(chalk.gray('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ'), chalk.yellow('npm run content:format'), chalk.gray('–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'));
            console.log(chalk.gray('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ'), chalk.yellow('npm run author:validate'), chalk.gray('–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'));
            console.log(chalk.gray('  ‚Ä¢ –°–º. —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:'), chalk.cyan('CONTRIBUTING.md\n'));
        }
    }
}

// –ó–∞–ø—É—Å–∫
const checker = new ContentChecker();
checker.run();