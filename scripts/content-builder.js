#!/usr/bin/env node

import { readFile, writeFile, readdir, mkdir } from 'node:fs/promises';
import { join, relative, dirname } from 'node:path';
import { existsSync } from 'node:fs';
import chalk from 'chalk';
import ora from 'ora';
import matter from 'gray-matter';
import { marked } from 'marked';
import yaml from 'yaml';

/**
 * Content Builder
 * –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è godojo.dev –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
class ContentBuilder {
    constructor() {
        this.outputDir = 'build';
        this.categories = new Map();
        this.topics = [];
        this.stats = {
            categories: 0,
            topics: 0,
            exercises: 0,
            codeExamples: 0
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
     */
    async run() {
        console.log(chalk.blue.bold('\nüèóÔ∏è  –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è godojo.dev\n'));

        const spinner = ora('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ...').start();

        try {
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
            await this.ensureOutputDir();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            spinner.text = '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...';
            const config = await this.loadConfig();

            // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            spinner.text = '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...';
            await this.scanContent();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
            spinner.text = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...';
            await this.generateOutput(config);

            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            spinner.text = '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...';
            await this.generateIndexes();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
            spinner.text = '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...';
            await this.generateManifest(config);

            spinner.succeed('–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            console.error(chalk.red('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:'), error);
            process.exit(1);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏
     */
    async ensureOutputDir() {
        if (!existsSync(this.outputDir)) {
            await mkdir(this.outputDir, { recursive: true });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadConfig() {
        const configPath = 'content.config.json';

        if (!existsSync(configPath)) {
            throw new Error('–§–∞–π–ª content.config.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const configContent = await readFile(configPath, 'utf8');
        return JSON.parse(configContent);
    }

    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async scanContent() {
        const contentDir = 'content';

        if (!existsSync(contentDir)) {
            throw new Error('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è content –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryDirs = await readdir(contentDir, { withFileTypes: true });

        for (const dir of categoryDirs) {
            if (dir.isDirectory()) {
                await this.scanCategory(join(contentDir, dir.name));
            }
        }
    }

    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async scanCategory(categoryPath) {
        const categorySlug = dirname(categoryPath).split('/').pop();

        // –ß–∏—Ç–∞–µ–º index.md –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const indexPath = join(categoryPath, 'index.md');
        if (existsSync(indexPath)) {
            const content = await readFile(indexPath, 'utf8');
            const { data } = matter(content);

            this.categories.set(categorySlug, {
                slug: categorySlug,
                ...data,
                topics: []
            });

            this.stats.categories++;
        }

        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã
        const topicDirs = await readdir(categoryPath, { withFileTypes: true });

        for (const dir of topicDirs) {
            if (dir.isDirectory()) {
                await this.scanTopic(join(categoryPath, dir.name), categorySlug);
            }
        }
    }

    /**
     * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã
     */
    async scanTopic(topicPath, categorySlug) {
        const topicFile = join(topicPath, 'topic.md');

        if (!existsSync(topicFile)) {
            return;
        }

        const content = await readFile(topicFile, 'utf8');
        const { data: frontmatter, content: markdown } = matter(content);

        // –ü–∞—Ä—Å–∏–º markdown –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const parsed = await this.parseMarkdown(markdown);

        const topic = {
            ...frontmatter,
            category: categorySlug,
            content: {
                theory: parsed.theory,
                examples: parsed.examples,
                exercises: parsed.exercises,
                bestPractices: parsed.bestPractices,
                commonMistakes: parsed.commonMistakes,
                realWorld: parsed.realWorld,
                summary: parsed.summary
            },
            stats: {
                wordCount: this.countWords(markdown),
                codeExamples: parsed.examples.length,
                exercises: parsed.exercises.length,
                readingTime: Math.ceil(this.countWords(markdown) / 200) // 200 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            }
        };

        this.topics.push(topic);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = this.categories.get(categorySlug);
        if (category) {
            category.topics.push({
                slug: frontmatter.slug,
                title: frontmatter.title,
                module: frontmatter.module
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.topics++;
        this.stats.codeExamples += parsed.examples.length;
        this.stats.exercises += parsed.exercises.length;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async parseMarkdown(markdown) {
        const sections = {
            theory: '',
            examples: [],
            exercises: [],
            bestPractices: '',
            commonMistakes: '',
            realWorld: '',
            summary: ''
        };

        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        const sectionRegex = /^## (.+)$/gm;
        const parts = markdown.split(sectionRegex);

        for (let i = 1; i < parts.length; i += 2) {
            const heading = parts[i];
            const content = parts[i + 1] || '';

            switch (heading) {
                case 'üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å':
                    sections.theory = content.trim();
                    break;

                case 'üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã':
                    sections.examples = this.extractCodeExamples(content);
                    break;

                case 'üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è':
                    sections.exercises = this.extractExercises(content);
                    break;

                case 'üîß –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏':
                    sections.bestPractices = content.trim();
                    break;

                case '‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏':
                    sections.commonMistakes = content.trim();
                    break;

                case 'üåç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ':
                    sections.realWorld = content.trim();
                    break;

                case 'üìù –†–µ–∑—é–º–µ':
                    sections.summary = content.trim();
                    break;
            }
        }

        return sections;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
     */
    extractCodeExamples(content) {
        const examples = [];
        const exampleRegex = /### (.+?)\n([\s\S]*?)(?=###|$)/g;

        let match;
        while ((match = exampleRegex.exec(content)) !== null) {
            const title = match[1].trim();
            const exampleContent = match[2].trim();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
            const codeMatch = exampleContent.match(/```go\n([\s\S]*?)\n```/);
            const code = codeMatch ? codeMatch[1] : '';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            const explanation = exampleContent
                .replace(/```go\n[\s\S]*?\n```/g, '')
                .trim();

            examples.push({
                title,
                code,
                explanation
            });
        }

        return examples;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
     */
    extractExercises(content) {
        const exercises = [];
        const exerciseRegex = /### –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (\d+): (.+?)\n([\s\S]*?)(?=###|$)/g;

        let match;
        while ((match = exerciseRegex.exec(content)) !== null) {
            const number = parseInt(match[1]);
            const title = match[2].trim();
            const exerciseContent = match[3].trim();

            exercises.push({
                number,
                title,
                content: exerciseContent
            });
        }

        return exercises;
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
     */
    countWords(text) {
        // –£–±–∏—Ä–∞–µ–º –∫–æ–¥ –∏ frontmatter –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
        const cleanText = text
            .replace(/```[\s\S]*?```/g, '')
            .replace(/^---[\s\S]*?---/m, '');

        return cleanText.split(/\s+/).filter(word => word.length > 0).length;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async generateOutput(config) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        for (const topic of this.topics) {
            const outputPath = join(
                this.outputDir,
                'topics',
                topic.category,
                `${topic.slug}.json`
            );

            await this.ensureDir(dirname(outputPath));
            await writeFile(outputPath, JSON.stringify(topic, null, 2));
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º YAML –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (const [slug, category] of this.categories) {
            const outputPath = join(
                this.outputDir,
                'categories',
                `${slug}.yaml`
            );

            await this.ensureDir(dirname(outputPath));
            await writeFile(outputPath, yaml.stringify(category));
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    async generateIndexes() {
        // –ò–Ω–¥–µ–∫—Å –≤—Å–µ—Ö —Ç–µ–º
        const topicsIndex = this.topics.map(topic => ({
            slug: topic.slug,
            title: topic.title,
            category: topic.category,
            module: topic.module,
            difficulty: topic.difficulty,
            estimatedMinutes: topic.estimatedMinutes,
            tags: topic.tags
        }));

        await writeFile(
            join(this.outputDir, 'topics-index.json'),
            JSON.stringify(topicsIndex, null, 2)
        );

        // –ò–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoriesIndex = Array.from(this.categories.values()).map(cat => ({
            slug: cat.slug,
            title: cat.title,
            description: cat.description,
            difficulty: cat.difficulty,
            topicsCount: cat.topics.length
        }));

        await writeFile(
            join(this.outputDir, 'categories-index.json'),
            JSON.stringify(categoriesIndex, null, 2)
        );
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
     */
    async generateManifest(config) {
        const manifest = {
            version: '1.0.0',
            generated: new Date().toISOString(),
            platform: 'godojo.dev',
            language: config.structure.defaultLanguage,
            repository: 'golang-book-ru',
            stats: {
                categories: this.stats.categories,
                topics: this.stats.topics,
                exercises: this.stats.exercises,
                codeExamples: this.stats.codeExamples
            },
            structure: {
                categories: Array.from(this.categories.keys()),
                modulesRange: {
                    min: Math.min(...this.topics.map(t => t.module)),
                    max: Math.max(...this.topics.map(t => t.module))
                }
            }
        };

        await writeFile(
            join(this.outputDir, 'manifest.json'),
            JSON.stringify(manifest, null, 2)
        );
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    async ensureDir(dir) {
        if (!existsSync(dir)) {
            await mkdir(dir, { recursive: true });
        }
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printResults() {
        console.log(chalk.blue('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏:\n'));

        console.log(chalk.gray('–ö–∞—Ç–µ–≥–æ—Ä–∏–π:'), this.stats.categories);
        console.log(chalk.gray('–¢–µ–º:'), this.stats.topics);
        console.log(chalk.gray('–ü—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞:'), this.stats.codeExamples);
        console.log(chalk.gray('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:'), this.stats.exercises);

        console.log(chalk.green('\n‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!'));
        console.log(chalk.gray('\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:'), chalk.cyan(this.outputDir));

        console.log(chalk.blue('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'));
        console.log(chalk.gray('  ‚Ä¢ manifest.json'), '- –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–±–æ—Ä–∫–∏');
        console.log(chalk.gray('  ‚Ä¢ topics-index.json'), '- –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö —Ç–µ–º');
        console.log(chalk.gray('  ‚Ä¢ categories-index.json'), '- –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        console.log(chalk.gray('  ‚Ä¢ topics/'), '- JSON —Ñ–∞–π–ª—ã —Ç–µ–º');
        console.log(chalk.gray('  ‚Ä¢ categories/'), '- YAML —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

        console.log(chalk.yellow('\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:'));
        console.log(chalk.gray('  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ'), chalk.cyan('npm run godojo:validate'), chalk.gray('–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n'));
    }
}

// –ó–∞–ø—É—Å–∫
const builder = new ContentBuilder();
builder.run();