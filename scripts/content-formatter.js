#!/usr/bin/env node

import { readFile, writeFile, readdir } from 'node:fs/promises';
import { join, relative } from 'node:path';
import { existsSync } from 'node:fs';
import chalk from 'chalk';
import ora from 'ora';
import matter from 'gray-matter';
import prettier from 'prettier';

/**
 * Content Formatter
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç markdown —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞
 */
class ContentFormatter {
    constructor() {
        this.stats = {
            totalFiles: 0,
            formattedFiles: 0,
            skippedFiles: 0,
            errors: 0
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è prettier –¥–ª—è markdown
        this.prettierConfig = {
            parser: 'markdown',
            printWidth: 80,
            proseWrap: 'preserve',
            tabWidth: 2,
            useTabs: false
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async run() {
        console.log(chalk.blue.bold('\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n'));

        const spinner = ora('–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ content
            if (!existsSync('content')) {
                spinner.fail('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è content –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã
            const files = await this.findMarkdownFiles('content');
            this.stats.totalFiles = files.length;

            spinner.text = `–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`;

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for (const file of files) {
                spinner.text = `–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${relative(process.cwd(), file)}`;
                const formatted = await this.formatFile(file);

                if (formatted) {
                    this.stats.formattedFiles++;
                } else {
                    this.stats.skippedFiles++;
                }
            }

            spinner.succeed('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            process.exit(1);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ markdown —Ñ–∞–π–ª–æ–≤
     */
    async findMarkdownFiles(dir) {
        const files = [];
        const entries = await readdir(dir, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = join(dir, entry.name);

            if (entry.isDirectory()) {
                const subFiles = await this.findMarkdownFiles(fullPath);
                files.push(...subFiles);
            } else if (entry.name.endsWith('.md')) {
                files.push(fullPath);
            }
        }

        return files;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async formatFile(filePath) {
        try {
            const content = await readFile(filePath, 'utf8');
            const { data: frontmatter, content: markdown } = matter(content);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º markdown —á–∞—Å—Ç—å
            let formattedMarkdown = await this.formatMarkdown(markdown);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            formattedMarkdown = this.applyCustomRules(formattedMarkdown);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            if (markdown === formattedMarkdown) {
                return false; // –§–∞–π–ª —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
            }

            // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å frontmatter
            const newContent = matter.stringify(formattedMarkdown, frontmatter);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            await writeFile(filePath, newContent, 'utf8');

            return true;

        } catch (error) {
            console.error(chalk.red(`\n–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${filePath}: ${error.message}`));
            this.stats.errors++;
            return false;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ markdown —Å prettier
     */
    async formatMarkdown(markdown) {
        try {
            return await prettier.format(markdown, this.prettierConfig);
        } catch (error) {
            // –ï—Å–ª–∏ prettier –Ω–µ –º–æ–∂–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            console.warn(chalk.yellow(`Prettier –Ω–µ —Å–º–æ–≥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞`));
            return markdown;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    applyCustomRules(markdown) {
        let formatted = markdown;

        // 1. –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
        formatted = this.standardizeHeadings(formatted);

        // 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        formatted = this.formatCodeBlocks(formatted);

        // 3. –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
        formatted = this.standardizeLists(formatted);

        // 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        formatted = this.fixLineBreaks(formatted);

        // 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        formatted = this.fixLinks(formatted);

        return formatted;
    }

    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
     */
    standardizeHeadings(markdown) {
        const headingMap = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            '## –ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ': '## üéØ –ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ',
            '## –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å': '## üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å',
            '## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã': '## üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã',
            '## –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏': '## üîß –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
            '## –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏': '## ‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏',
            '## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ': '## üåç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ',
            '## –†–µ–∑—é–º–µ': '## üìù –†–µ–∑—é–º–µ',
            '## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è': '## üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
            '## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã': '## üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
            '## –ß—Ç–æ –¥–∞–ª—å—à–µ': '## ‚û°Ô∏è –ß—Ç–æ –¥–∞–ª—å—à–µ',

            // –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã
            '### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏': '### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
            '### –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã': '### –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã',
            '### –ö–æ–≥–¥–∞ –∏ –∑–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '### –ö–æ–≥–¥–∞ –∏ –∑–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
        };

        let result = markdown;
        for (const [oldHeading, newHeading] of Object.entries(headingMap)) {
            const regex = new RegExp(`^${oldHeading.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`, 'gm');
            result = result.replace(regex, newHeading);
        }

        return result;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
     */
    formatCodeBlocks(markdown) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–º–µ—é—Ç —è–∑—ã–∫
        return markdown.replace(/```\n/g, '```go\n');
    }

    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
     */
    standardizeLists(markdown) {
        // –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ - –≤ —Å–ø–∏—Å–∫–∞—Ö
        let result = markdown;

        // –ü—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        result = result.replace(/^\* /gm, '- ');

        // –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        result = result.replace(/^  \* /gm, '  - ');
        result = result.replace(/^    \* /gm, '    - ');

        return result;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
     */
    fixLineBreaks(markdown) {
        let result = markdown;

        // –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        result = result.replace(/\n(#{1,6} )/g, '\n\n$1');

        // –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        result = result.replace(/```\n\n/g, '```\n');
        result = result.replace(/```\n([^#])/g, '```\n\n$1');

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
        result = result.replace(/\n{3,}/g, '\n\n');

        return result;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
     */
    fixLinks(markdown) {
        let result = markdown;

        // –î–æ–±–∞–≤–ª—è–µ–º https:// –∫ —Å—Å—ã–ª–∫–∞–º –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        result = result.replace(/\[([^\]]+)\]\(((?!https?:\/\/|#|\/)[^)]+\.[^)]+)\)/g, '[$1](https://$2)');

        return result;
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printResults() {
        console.log(chalk.blue('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n'));

        console.log(chalk.gray('–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:'), this.stats.totalFiles);
        console.log(chalk.green('–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ:'), this.stats.formattedFiles);
        console.log(chalk.yellow('–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã):'), this.stats.skippedFiles);

        if (this.stats.errors > 0) {
            console.log(chalk.red('–û—à–∏–±–æ–∫:'), this.stats.errors);
        }

        if (this.stats.formattedFiles > 0) {
            console.log(chalk.green('\n‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã!'));
            console.log(chalk.gray('\nüí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º:'));
            console.log(chalk.cyan('   git diff\n'));
        } else {
            console.log(chalk.green('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n'));
        }
    }
}

// –ó–∞–ø—É—Å–∫
const formatter = new ContentFormatter();
formatter.run();