#!/usr/bin/env node

import { readdir, stat, readFile } from 'node:fs/promises';
import { join, relative } from 'node:path';
import { existsSync } from 'node:fs';
import chalk from 'chalk';
import ora from 'ora';
import matter from 'gray-matter';

/**
 * Structure Validator
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
 */
class StructureValidator {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.expectedStructure = {
            root: [
                'content',
                'content.config.json',
                'package.json',
                'CONTRIBUTING.md',
                'README.md',
                'scripts'
            ],
            scripts: [
                'content-author.js',
                'content-checker.js',
                'content-formatter.js',
                'content-builder.js',
                'git-sync.js',
                'structure-validator.js',
                'structure-generator.js',
                'help.js'
            ]
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    async run() {
        console.log(chalk.blue.bold('\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞\n'));

        const spinner = ora('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...';
            await this.validateRootStructure();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É content
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞...';
            await this.validateContentStructure();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...';
            await this.validateConfiguration();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏...';
            await this.validateNamingConventions();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...';
            await this.validateIntegrity();

            spinner.stop();

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();

            // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
            process.exit(this.errors.length > 0 ? 1 : 0);

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            process.exit(1);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    async validateRootStructure() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for (const item of this.expectedStructure.root) {
            if (!existsSync(item)) {
                this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${item}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º scripts
        if (existsSync('scripts')) {
            for (const script of this.expectedStructure.scripts) {
                const scriptPath = join('scripts', script);
                if (!existsSync(scriptPath)) {
                    this.addWarning(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–ø—Ç: ${script}`);
                }
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã content
     */
    async validateContentStructure() {
        const contentDir = 'content';

        if (!existsSync(contentDir)) {
            this.addError('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è content –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const config = await this.loadConfig();
        if (!config) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (const category of config.categories) {
            const categoryPath = join(contentDir, category.slug);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (!existsSync(categoryPath)) {
                this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.slug}`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º index.md
            const indexPath = join(categoryPath, 'index.md');
            if (!existsSync(indexPath)) {
                this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç index.md –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.slug}`);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ index.md
                await this.validateCategoryIndex(indexPath, category);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–º
            await this.validateTopicsStructure(categoryPath);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadConfig() {
        try {
            const configContent = await readFile('content.config.json', 'utf8');
            return JSON.parse(configContent);
        } catch (error) {
            this.addError(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ index.md –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async validateCategoryIndex(indexPath, categoryConfig) {
        try {
            const content = await readFile(indexPath, 'utf8');
            const { data: frontmatter } = matter(content);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (frontmatter.category !== categoryConfig.slug) {
                this.addError(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ${indexPath}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const requiredFields = ['title', 'description', 'difficulty', 'authorId'];
            for (const field of requiredFields) {
                if (!frontmatter[field]) {
                    this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '${field}' –≤ ${indexPath}`);
                }
            }

        } catch (error) {
            this.addError(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${indexPath}: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–º
     */
    async validateTopicsStructure(categoryPath) {
        const entries = await readdir(categoryPath, { withFileTypes: true });
        const topicDirs = entries.filter(e => e.isDirectory());

        if (topicDirs.length === 0) {
            this.addWarning(`–ù–µ—Ç —Ç–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${relative(process.cwd(), categoryPath)}`);
        }

        for (const dir of topicDirs) {
            const topicPath = join(categoryPath, dir.name);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ (–¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–∞)
            if (!/^\d{2}-/.test(dir.name)) {
                this.addWarning(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–º—ã: ${dir.name} (–¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 01-, 02-, –∏ —Ç.–¥.)`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ topic.md
            const topicFile = join(topicPath, 'topic.md');
            if (!existsSync(topicFile)) {
                this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç topic.md –≤: ${relative(process.cwd(), topicPath)}`);
            } else {
                await this.validateTopicFile(topicFile);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ç–µ–º—ã
     */
    async validateTopicFile(topicPath) {
        try {
            const content = await readFile(topicPath, 'utf8');
            const { data: frontmatter } = matter(content);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const requiredFields = [
                'title', 'description', 'module', 'category',
                'slug', 'difficulty', 'authorId'
            ];

            for (const field of requiredFields) {
                if (!frontmatter[field]) {
                    this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '${field}' –≤ ${relative(process.cwd(), topicPath)}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
            if (frontmatter.module && (frontmatter.module < 1 || frontmatter.module > 79)) {
                this.addWarning(`–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è (${frontmatter.module}) –≤ ${relative(process.cwd(), topicPath)}`);
            }

        } catch (error) {
            this.addError(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${relative(process.cwd(), topicPath)}: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async validateConfiguration() {
        const configPath = 'content.config.json';

        if (!existsSync(configPath)) {
            this.addError('–§–∞–π–ª content.config.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        try {
            const content = await readFile(configPath, 'utf8');
            const config = JSON.parse(content);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            const requiredSections = ['structure', 'categories', 'quality', 'godojo'];
            for (const section of requiredSections) {
                if (!config[section]) {
                    this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '${section}' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (config.categories && Array.isArray(config.categories)) {
                const slugs = new Set();

                for (const category of config.categories) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
                    if (slugs.has(category.slug)) {
                        this.addError(`–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.slug}`);
                    }
                    slugs.add(category.slug);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const requiredFields = ['slug', 'titleRu', 'modules', 'difficulty'];
                    for (const field of requiredFields) {
                        if (!category[field]) {
                            this.addError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '${field}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.slug || 'unknown'}`);
                        }
                    }
                }
            }

        } catch (error) {
            this.addError(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
     */
    async validateNamingConventions() {
        const contentDir = 'content';

        if (!existsSync(contentDir)) return;

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        await this.checkNaming(contentDir);
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
     */
    async checkNaming(dir) {
        const entries = await readdir(dir, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = join(dir, entry.name);

            if (entry.isDirectory()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ lowercase, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å)
                if (!/^[a-z0-9-]+$/.test(entry.name)) {
                    this.addWarning(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${relative(process.cwd(), fullPath)}`);
                }

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await this.checkNaming(fullPath);

            } else if (entry.isFile()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if (entry.name.endsWith('.md')) {
                    if (!/^[a-z0-9-]+\.md$/.test(entry.name)) {
                        this.addWarning(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${relative(process.cwd(), fullPath)}`);
                    }
                }
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    async validateIntegrity() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–º—ã –∏–º–µ—é—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
        const contentDir = 'content';

        if (!existsSync(contentDir)) return;

        const categories = await readdir(contentDir, { withFileTypes: true });

        for (const category of categories) {
            if (!category.isDirectory()) continue;

            const categoryPath = join(contentDir, category.name);
            const topics = await readdir(categoryPath, { withFileTypes: true });

            const topicNumbers = [];

            for (const topic of topics) {
                if (!topic.isDirectory()) continue;

                const match = topic.name.match(/^(\d{2})-/);
                if (match) {
                    topicNumbers.push(parseInt(match[1]));
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            topicNumbers.sort((a, b) => a - b);

            for (let i = 0; i < topicNumbers.length; i++) {
                const expected = i + 1;
                if (topicNumbers[i] !== expected) {
                    this.addWarning(`–ù–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –≤ ${category.name}: –æ–∂–∏–¥–∞–ª—Å—è ${expected}, –Ω–∞–π–¥–µ–Ω ${topicNumbers[i]}`);
                    break;
                }
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    addError(message) {
        this.errors.push(message);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    addWarning(message) {
        this.warnings.push(message);
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printResults() {
        console.log(chalk.blue('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:\n'));

        if (this.errors.length === 0 && this.warnings.length === 0) {
            console.log(chalk.green('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!\n'));
            return;
        }

        // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        if (this.errors.length > 0) {
            console.log(chalk.red.bold(`‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${this.errors.length}\n`));
            this.errors.forEach((error, i) => {
                console.log(chalk.red(`${i + 1}. ${error}`));
            });
        }

        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (this.warnings.length > 0) {
            console.log(chalk.yellow.bold(`\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}\n`));
            this.warnings.forEach((warning, i) => {
                console.log(chalk.yellow(`${i + 1}. ${warning}`));
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.errors.length > 0) {
            console.log(chalk.blue('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'));
            console.log(chalk.gray('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ'), chalk.cyan('npm run structure:generate'), chalk.gray('–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'));
            console.log(chalk.gray('  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CONTRIBUTING.md –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'));
            console.log(chalk.gray('  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ content.config.json –∞–∫—Ç—É–∞–ª–µ–Ω\n'));
        }
    }
}

// –ó–∞–ø—É—Å–∫
const validator = new StructureValidator();
validator.run();