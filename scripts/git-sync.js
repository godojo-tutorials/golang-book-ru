#!/usr/bin/env node

import { exec } from 'node:child_process';
import { promisify } from 'node:util';
import chalk from 'chalk';
import ora from 'ora';
import inquirer from 'inquirer';

const execAsync = promisify(exec);

/**
 * Git Sync Tool
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è git –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
class GitSync {
    constructor() {
        this.hasChanges = false;
        this.currentBranch = '';
        this.stats = {
            added: 0,
            modified: 0,
            deleted: 0
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    async run() {
        console.log(chalk.blue.bold('\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Git\n'));

        const spinner = ora('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            await this.checkGitRepo();

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            spinner.text = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏...';
            this.currentBranch = await this.getCurrentBranch();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...';
            await this.checkChanges();

            if (!this.hasChanges) {
                spinner.succeed('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                console.log(chalk.gray('\n‚ú® –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è\n'));
                return;
            }

            spinner.succeed(`–ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${this.getTotalChanges()} —Ñ–∞–π–ª–æ–≤`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await this.showChanges();

            // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
            const action = await this.promptAction();

            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await this.executeAction(action);

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            process.exit(1);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
     */
    async checkGitRepo() {
        try {
            await execAsync('git rev-parse --is-inside-work-tree');
        } catch {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: git init');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
     */
    async getCurrentBranch() {
        const { stdout } = await execAsync('git branch --show-current');
        return stdout.trim();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    async checkChanges() {
        const { stdout } = await execAsync('git status --porcelain');

        if (stdout.trim() === '') {
            this.hasChanges = false;
            return;
        }

        this.hasChanges = true;

        // –ü–∞—Ä—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const lines = stdout.trim().split('\n');
        for (const line of lines) {
            const status = line.substring(0, 2);

            if (status.includes('A') || status.includes('?')) {
                this.stats.added++;
            } else if (status.includes('M')) {
                this.stats.modified++;
            } else if (status.includes('D')) {
                this.stats.deleted++;
            }
        }
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    getTotalChanges() {
        return this.stats.added + this.stats.modified + this.stats.deleted;
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    async showChanges() {
        console.log(chalk.blue('\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n'));

        if (this.stats.added > 0) {
            console.log(chalk.green(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${this.stats.added}`));
        }
        if (this.stats.modified > 0) {
            console.log(chalk.yellow(`  ‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–æ: ${this.stats.modified}`));
        }
        if (this.stats.deleted > 0) {
            console.log(chalk.red(`  ‚ûñ –£–¥–∞–ª–µ–Ω–æ: ${this.stats.deleted}`));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        const { stdout } = await execAsync('git status -s');
        console.log(chalk.gray('\n–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'));
        console.log(chalk.gray(stdout));
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async promptAction() {
        const { action } = await inquirer.prompt([{
            type: 'list',
            name: 'action',
            message: '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
            choices: [
                {
                    name: 'üìù –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏',
                    value: 'commit'
                },
                {
                    name: 'üåø –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –∏ –∫–æ–º–º–∏—Ç',
                    value: 'branch-commit'
                },
                {
                    name: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º',
                    value: 'sync'
                },
                {
                    name: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
                    value: 'status'
                },
                {
                    name: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    value: 'cancel'
                }
            ]
        }]);

        return action;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    async executeAction(action) {
        switch (action) {
            case 'commit':
                await this.createCommit();
                break;

            case 'branch-commit':
                await this.createBranchAndCommit();
                break;

            case 'sync':
                await this.syncWithRemote();
                break;

            case 'status':
                await this.showDetailedStatus();
                break;

            case 'cancel':
                console.log(chalk.gray('\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n'));
                break;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
     */
    async createCommit() {
        // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const { filesToAdd } = await inquirer.prompt([{
            type: 'checkbox',
            name: 'filesToAdd',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞:',
            choices: [
                {
                    name: '–í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (content/**)',
                    value: 'content',
                    checked: true
                },
                {
                    name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã',
                    value: 'config',
                    checked: false
                },
                {
                    name: '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    value: 'all',
                    checked: false
                }
            ]
        }]);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        const commitMessage = await this.generateCommitMessage();

        const spinner = ora('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...').start();

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            for (const type of filesToAdd) {
                switch (type) {
                    case 'content':
                        await execAsync('git add content/');
                        break;
                    case 'config':
                        await execAsync('git add *.json *.yaml *.yml');
                        break;
                    case 'all':
                        await execAsync('git add .');
                        break;
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            await execAsync(`git commit -m "${commitMessage}"`);

            spinner.succeed('–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
            const { stdout } = await execAsync('git log -1 --oneline');
            console.log(chalk.gray('\n–°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç:'), chalk.green(stdout.trim()));

        } catch (error) {
            spinner.fail('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç');
            console.error(chalk.red(error.message));
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –∏ –∫–æ–º–º–∏—Ç–∞
     */
    async createBranchAndCommit() {
        const { branchName } = await inquirer.prompt([{
            type: 'input',
            name: 'branchName',
            message: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏:',
            validate: input => {
                if (!input.trim()) return '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
                if (!/^[a-zA-Z0-9-_/]+$/.test(input)) {
                    return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ';
                }
                return true;
            },
            filter: input => `content/${input.trim()}`
        }]);

        const spinner = ora('–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏...').start();

        try {
            // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
            await execAsync(`git checkout -b ${branchName}`);
            spinner.text = '–í–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...';

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            await this.createCommit();

            spinner.succeed(`–í–µ—Ç–∫–∞ ${branchName} —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–æ–º–º–∏—Ç–æ–º`);

        } catch (error) {
            spinner.fail('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É');
            console.error(chalk.red(error.message));
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
     */
    async syncWithRemote() {
        const spinner = ora('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ remote
            const { stdout: remotes } = await execAsync('git remote');

            if (!remotes.trim()) {
                spinner.fail('–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                console.log(chalk.yellow('\nüí° –î–æ–±–∞–≤—å—Ç–µ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:'));
                console.log(chalk.gray('   git remote add origin <URL>\n'));
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            spinner.text = '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...';
            await execAsync('git fetch');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            const { stdout: status } = await execAsync('git status -sb');

            if (status.includes('ahead')) {
                spinner.text = '–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...';
                await execAsync(`git push origin ${this.currentBranch}`);
                spinner.succeed('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
            } else if (status.includes('behind')) {
                spinner.text = '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...';
                await execAsync(`git pull origin ${this.currentBranch}`);
                spinner.succeed('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!');
            } else {
                spinner.succeed('–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

        } catch (error) {
            spinner.fail('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            console.error(chalk.red(error.message));
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    async showDetailedStatus() {
        console.log(chalk.blue('\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:\n'));

        try {
            // –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
            console.log(chalk.gray('–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:'), chalk.cyan(this.currentBranch));

            // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            const { stdout: lastCommit } = await execAsync('git log -1 --oneline');
            console.log(chalk.gray('–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:'), lastCommit.trim());

            // –°—Ç–∞—Ç—É—Å
            const { stdout: status } = await execAsync('git status');
            console.log(chalk.gray('\n–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å:'));
            console.log(status);

        } catch (error) {
            console.error(chalk.red('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message));
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
     */
    async generateCommitMessage() {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const { stdout } = await execAsync('git diff --cached --name-only');
        const files = stdout.trim().split('\n').filter(f => f);

        let suggestion = 'content: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (files.every(f => f.startsWith('content/'))) {
            const categories = new Set();
            files.forEach(f => {
                const match = f.match(/content\/([^/]+)/);
                if (match) categories.add(match[1]);
            });

            if (categories.size === 1) {
                suggestion = `content: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${Array.from(categories)[0]}`;
            } else if (categories.size > 1) {
                suggestion = `content: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`;
            }
        }

        const { commitMessage } = await inquirer.prompt([{
            type: 'input',
            name: 'commitMessage',
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:',
            default: suggestion,
            validate: input => input.trim().length > 0 || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        }]);

        return commitMessage;
    }
}

// –ó–∞–ø—É—Å–∫
const sync = new GitSync();
sync.run();