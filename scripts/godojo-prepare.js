#!/usr/bin/env node

import { readFile, writeFile, readdir, mkdir } from 'node:fs/promises';
import { join, relative, dirname } from 'node:path';
import { existsSync } from 'node:fs';
import chalk from 'chalk';
import ora from 'ora';
import matter from 'gray-matter';
import { marked } from 'marked';
import slugify from 'slugify';

/**
 * GoDojo Prepare Tool
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É godojo.dev
 */
class GoDojoPrepare {
    constructor() {
        this.outputDir = 'godojo-export';
        this.apiVersion = 'v1';
        this.stats = {
            categories: 0,
            topics: 0,
            exercises: 0,
            codeExamples: 0,
            totalSize: 0
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
     */
    async run() {
        console.log(chalk.blue.bold('\nüöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è godojo.dev\n'));

        const spinner = ora('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...').start();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
            spinner.text = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...';
            const hasBuild = await this.checkBuild();

            if (!hasBuild) {
                spinner.info('–°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º content:build...');
                console.log(chalk.gray('\n–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç:'));
                console.log(chalk.cyan('npm run content:build\n'));
                process.exit(1);
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            spinner.text = '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞...';
            await this.ensureExportDir();

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            spinner.text = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...';
            await this.generatePlatformMetadata();

            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            spinner.text = '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...';
            await this.optimizeContent();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            spinner.text = '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...';
            await this.generateSearchIndexes();

            // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            spinner.text = '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...';
            await this.createUploadPackage();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            spinner.text = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...';
            await this.generateReport();

            spinner.succeed('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printResults();

        } catch (error) {
            spinner.fail(`–û—à–∏–±–∫–∞: ${error.message}`);
            console.error(chalk.red('\n–î–µ—Ç–∞–ª–∏:'), error);
            process.exit(1);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–±–æ—Ä–∫–∏
     */
    async checkBuild() {
        return existsSync('build/manifest.json');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async ensureExportDir() {
        if (!existsSync(this.outputDir)) {
            await mkdir(this.outputDir, { recursive: true });
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const subdirs = ['content', 'metadata', 'search', 'assets'];
        for (const subdir of subdirs) {
            const path = join(this.outputDir, subdir);
            if (!existsSync(path)) {
                await mkdir(path, { recursive: true });
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     */
    async generatePlatformMetadata() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–±–æ—Ä–∫–∏
        const manifest = JSON.parse(await readFile('build/manifest.json', 'utf8'));

        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è godojo.dev
        const platformMeta = {
            version: this.apiVersion,
            generated: new Date().toISOString(),
            source: {
                repository: 'golang-book-ru',
                language: 'ru',
                version: manifest.version
            },
            content: {
                type: 'tutorial',
                subject: 'golang',
                level: 'beginner-to-expert',
                modules: {
                    total: 79,
                    available: manifest.stats.topics,
                    range: manifest.structure.modulesRange
                }
            },
            features: {
                exercises: true,
                codePlayground: true,
                progressTracking: true,
                certificates: false,
                multiLanguage: false
            },
            requirements: {
                runtime: 'go1.21+',
                prerequisites: ['basic-programming'],
                estimatedHours: 150
            }
        };

        await writeFile(
            join(this.outputDir, 'metadata', 'platform.json'),
            JSON.stringify(platformMeta, null, 2)
        );
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async optimizeContent() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∏–∑ —Å–±–æ—Ä–∫–∏
        const topicsIndex = JSON.parse(await readFile('build/topics-index.json', 'utf8'));

        for (const topicMeta of topicsIndex) {
            const topicPath = join('build/topics', topicMeta.category, `${topicMeta.slug}.json`);

            if (existsSync(topicPath)) {
                const topic = JSON.parse(await readFile(topicPath, 'utf8'));

                // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                const optimized = await this.optimizeTopic(topic);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                const outputPath = join(
                    this.outputDir,
                    'content',
                    topicMeta.category,
                    `${topicMeta.slug}.json`
                );

                await this.ensureDir(dirname(outputPath));
                await writeFile(outputPath, JSON.stringify(optimized, null, 2));

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.stats.topics++;
                this.stats.exercises += optimized.content.exercises.length;
                this.stats.codeExamples += optimized.content.examples.length;
            }
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–µ–º—ã
     */
    async optimizeTopic(topic) {
        const optimized = {
            ...topic,
            content: {
                ...topic.content,
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                theoryHtml: marked(topic.content.theory || ''),
                bestPracticesHtml: marked(topic.content.bestPractices || ''),
                commonMistakesHtml: marked(topic.content.commonMistakes || ''),
                realWorldHtml: marked(topic.content.realWorld || ''),
                summaryHtml: marked(topic.content.summary || '')
            }
        };

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
        optimized.content.examples = topic.content.examples.map(example => ({
            ...example,
            explanationHtml: marked(example.explanation || ''),
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è playground
            playground: {
                template: this.generatePlaygroundTemplate(example.code),
                runnable: this.isRunnableCode(example.code),
                expectedOutput: this.extractExpectedOutput(example.explanation)
            }
        }));

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        optimized.content.exercises = topic.content.exercises.map(exercise => ({
            ...exercise,
            contentHtml: marked(exercise.content || ''),
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Ç–µ—Å—Ç—ã
            hints: this.extractHints(exercise.content),
            tests: this.generateExerciseTests(exercise)
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        optimized.navigation = {
            previous: this.findPreviousTopic(topic),
            next: this.findNextTopic(topic),
            category: topic.category
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        optimized.progress = {
            estimatedMinutes: topic.estimatedMinutes || 30,
            difficulty: topic.difficulty,
            requiredForCertificate: topic.module <= 60,
            bonusContent: topic.module > 60
        };

        return optimized;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è playground
     */
    generatePlaygroundTemplate(code) {
        // –ï—Å–ª–∏ –∫–æ–¥ —É–∂–µ –ø–æ–ª–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (code.includes('package main') && code.includes('func main()')) {
            return code;
        }

        // –ò–Ω–∞—á–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
        return `package main

import (
    "fmt"
)

func main() {
    ${code.split('\n').map(line => '    ' + line).join('\n')}
}`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥
     */
    isRunnableCode(code) {
        // –ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å package main –∏ func main
        return code.includes('package main') && code.includes('func main()');
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
     */
    extractExpectedOutput(explanation) {
        // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –≤—ã–≤–æ–¥–æ–º
        const outputMatch = explanation.match(/```(?:text|bash|output)?\n([\s\S]*?)```/);
        return outputMatch ? outputMatch[1].trim() : null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
     */
    extractHints(content) {
        const hints = [];
        const hintPattern = /\*\*–ü–æ–¥—Å–∫–∞–∑–∫[–∞–∏]:\*\*\s*([\s\S]*?)(?=\n\n|\*\*|$)/g;

        let match;
        while ((match = hintPattern.exec(content)) !== null) {
            const hintText = match[1].trim();
            const hintLines = hintText.split('\n').map(line => line.replace(/^[-‚Ä¢]\s*/, '').trim());
            hints.push(...hintLines.filter(line => line.length > 0));
        }

        return hints;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
     */
    generateExerciseTests(exercise) {
        // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        const tests = [];

        if (exercise.title.toLowerCase().includes('–±–∞–∑–æ–≤')) {
            tests.push({
                name: '–ö–æ–º–ø–∏–ª—è—Ü–∏—è',
                type: 'compile',
                description: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫'
            });
        }

        if (exercise.title.toLowerCase().includes('—Ñ—É–Ω–∫—Ü–∏')) {
            tests.push({
                name: '–ù–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                type: 'function_exists',
                description: '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç—Ä–µ–±—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è'
            });
        }

        tests.push({
            name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
            type: 'run',
            description: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –ø–∞–Ω–∏–∫–∏'
        });

        return tests;
    }

    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã
     */
    findPreviousTopic(topic) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å
        if (topic.module > 1) {
            return {
                module: topic.module - 1,
                hint: 'previous_topic'
            };
        }
        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã
     */
    findNextTopic(topic) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if (topic.module < 79) {
            return {
                module: topic.module + 1,
                hint: 'next_topic'
            };
        }
        return null;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    async generateSearchIndexes() {
        const searchIndex = {
            version: '1.0',
            generated: new Date().toISOString(),
            documents: []
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        const contentDir = join(this.outputDir, 'content');
        const categories = await readdir(contentDir, { withFileTypes: true });

        for (const category of categories) {
            if (!category.isDirectory()) continue;

            const categoryPath = join(contentDir, category.name);
            const topics = await readdir(categoryPath);

            for (const topicFile of topics) {
                if (!topicFile.endsWith('.json')) continue;

                const topic = JSON.parse(await readFile(join(categoryPath, topicFile), 'utf8'));

                // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                searchIndex.documents.push({
                    id: `${topic.category}_${topic.slug}`,
                    title: topic.title,
                    description: topic.description,
                    category: topic.category,
                    module: topic.module,
                    difficulty: topic.difficulty,
                    tags: topic.tags || [],
                    // –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    searchText: this.generateSearchText(topic),
                    // –í–µ—Å–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                    weight: {
                        module: topic.module,
                        difficulty: this.difficultyWeight(topic.difficulty),
                        popularity: 1.0
                    }
                });
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
        await writeFile(
            join(this.outputDir, 'search', 'index.json'),
            JSON.stringify(searchIndex, null, 2)
        );

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const autocomplete = searchIndex.documents.map(doc => ({
            id: doc.id,
            title: doc.title,
            category: doc.category,
            module: doc.module
        }));

        await writeFile(
            join(this.outputDir, 'search', 'autocomplete.json'),
            JSON.stringify(autocomplete, null, 2)
        );
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    generateSearchText(topic) {
        const parts = [
            topic.title,
            topic.description,
            topic.content.theory,
            topic.content.summary,
            ...topic.tags
        ];

        return parts
            .filter(part => part)
            .join(' ')
            .toLowerCase()
            .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º HTML
            .replace(/```[\s\S]*?```/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–¥
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * –í–µ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    difficultyWeight(difficulty) {
        const weights = {
            'Beginner': 1.0,
            'Intermediate': 0.8,
            'Advanced': 0.6
        };
        return weights[difficulty] || 0.5;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async createUploadPackage() {
        const packageInfo = {
            type: 'godojo-content-package',
            version: '1.0',
            created: new Date().toISOString(),
            repository: 'golang-book-ru',
            language: 'ru',
            contents: {
                metadata: 'metadata/',
                content: 'content/',
                search: 'search/',
                assets: 'assets/'
            },
            instructions: {
                endpoint: 'https://api.godojo.dev/v1/content/upload',
                method: 'POST',
                authentication: 'Bearer token required',
                format: 'multipart/form-data'
            },
            validation: {
                checksum: await this.calculateChecksum(),
                totalSize: this.stats.totalSize,
                fileCount: await this.countFiles()
            }
        };

        await writeFile(
            join(this.outputDir, 'package.json'),
            JSON.stringify(packageInfo, null, 2)
        );
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
     */
    async calculateChecksum() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å crypto
        return 'checksum-placeholder';
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
     */
    async countFiles() {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        let count = 0;

        const countDir = async (dir) => {
            const entries = await readdir(dir, { withFileTypes: true });
            for (const entry of entries) {
                if (entry.isDirectory()) {
                    await countDir(join(dir, entry.name));
                } else {
                    count++;
                }
            }
        };

        await countDir(this.outputDir);
        return count;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
     */
    async generateReport() {
        const report = {
            generated: new Date().toISOString(),
            exportDirectory: this.outputDir,
            stats: this.stats,
            readyForUpload: true,
            nextSteps: [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
                '–ó–∞–ø—É—Å—Ç–∏—Ç–µ godojo:validate –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
                '–ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω –Ω–∞ godojo.dev',
                '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
            ],
            notes: [
                '–ö–æ–Ω—Ç–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏',
                '–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã',
                '–ö–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è playground',
                '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã'
            ]
        };

        await writeFile(
            join(this.outputDir, 'export-report.json'),
            JSON.stringify(report, null, 2)
        );
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    async ensureDir(dir) {
        if (!existsSync(dir)) {
            await mkdir(dir, { recursive: true });
        }
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printResults() {
        console.log(chalk.blue('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n'));

        console.log(chalk.gray('–ö–∞—Ç–µ–≥–æ—Ä–∏–π:'), this.stats.categories);
        console.log(chalk.gray('–¢–µ–º:'), this.stats.topics);
        console.log(chalk.gray('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:'), this.stats.exercises);
        console.log(chalk.gray('–ü—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞:'), this.stats.codeExamples);

        console.log(chalk.green('\n‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è godojo.dev!'));
        console.log(chalk.gray('\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:'), chalk.cyan(this.outputDir));

        console.log(chalk.blue('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:'));
        console.log(chalk.gray('  ‚Ä¢ metadata/'), '- –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
        console.log(chalk.gray('  ‚Ä¢ content/'), '- –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
        console.log(chalk.gray('  ‚Ä¢ search/'), '- –ø–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã');
        console.log(chalk.gray('  ‚Ä¢ package.json'), '- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ');

        console.log(chalk.yellow('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:'));
        console.log(chalk.gray('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç:'), chalk.cyan('npm run godojo:validate'));
        console.log(chalk.gray('  2. –ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω –Ω–∞'), chalk.cyan('godojo.dev'));
        console.log(chalk.gray('  3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API –∏–ª–∏ –∞–¥–º–∏–Ω–∫—É\n'));
    }
}

// –ó–∞–ø—É—Å–∫
const prepare = new GoDojoPrepare();
prepare.run();